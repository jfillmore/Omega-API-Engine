#!/bin/bash -u

# omega API engine
# http://code.google.com/p/theomega/
# 
# Copyright 2011, Jonathon Fillmore
# Licensed under the MIT license. See LICENSE file.
# http://www.opensource.org/licenses/mit-license.php

BASE_DIR=$(cd $(dirname "$0") && pwd -P)
SCRIPT_NAME=$(basename "$0")
WHOAMI=$(whoami)

function usage {
	cat <<-EOI
	$SCRIPT_NAME [name] [options]

	Combines and compiles JS ands CSS files together into one file for each.
	If a name is given that name will be used for the files instead. Defaults:
	  $name.js
      $name.css

	OPTIONS
	   -j, --js FILE       Include JavaScript file FILE.
	   -c, --css FILE      Include CSS file FILE.
	                         (WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS,
	                         ADVANCED_OPTIMIZATIONS)
	   -u, --user  USER    OS user for output files. Default: $os_user
	   -g, --group GROUP   OS group for output files. Default: $os_group
	   -p, --perms PERMS   OS perms for output files. Default: $os_perms
	   -o, --opt OPTIMIZE  Optimization level. Default: $optimization
	   --js-dir DIR        Directory to output JS file to.
	                         Default: $(BASE_DIR)
	   --css-dir DIR       Directory to output JS file to.
	                         Default: $(BASE_DIR)
	   --compiler PATH     Path to google code compiler. Default: $compiler
	   -h, --help          This information.
	
	EXAMPLES
	   $SCRIPT_NAME -j js/foo.js -j js/bar.js -c css/foo.css -n foobar 
	EOI
}

function fail {
	echo "$@" >&2
	# clean up temp files
	[ -f "$js_dir/$name.js.compiling" ] && rm "$js_dir/$name.js.compiling"
	[ -f "$js_dir/.$name.dev.js.$$"  ] && rm "$js_dir/.$name.dev.js.$$" 
	[ -f "$css_dir/.$name.css.$$" ] && rm "$css_dir/.$name.css.$$"
	exit 1
}

# variable to customize build by -- TODO: build into param system
#======================================================
declare name=$(basename $(pwd -P))
declare js_dir=''
declare css_dir=''
declare js_files=()
declare css_files=()
declare compiler=~/scripts/compiler.jar
declare optimization=WHITESPACE_ONLY
#optimization=SIMPLE_OPTIMIZATIONS
#optimization=ADVANCED_OPTIMIZATIONS 
declare os_user=$(whoami)
declare os_group=$(groups | awk '{print $1}')
declare os_perms=400


# start of logic
#======================================================
while [ $# -gt 0 ]; do
	arg="$1"
	shift
	case "$arg" in
		-h|--help|-H)
			usage
			exit
			;;
		-j|--js)
			[ $# -gt 0 ] || fail "Missing argument to --js."
			js_files[${#js_files[*]}]="$1"
			shift
			;;
		-c|--css)
			[ $# -gt 0 ] || fail "Missing argument to --css."
			css_files[${#css_files[*]}]="$1"
			shift
			;;
		-u|--user)
			[ $# -gt 0 ] || fail "Missing argument to --user."
			os_user="$1"
			shift
			;;
		-g|--group)
			[ $# -gt 0 ] || fail "Missing argument to --group."
			os_group="$1"
			shift
			;;
		-p|--perms)
			[ $# -gt 0 ] || fail "Missing argument to --perms."
			os_perms="$1"
			shift
			;;
		--opt)
			[ $# -gt 0 ] || fail "Missing argument to --opt."
			optimization="$1"
			[[ $optimization == 'WHITESPACE_ONLY' || \
				$optimization == 'SIMPLE_OPTIMIZATIONS' || \
				$optimization == 'ADVANCED_OPTIMIZATIONS' ]] \
				|| fail "Invalid optimization: $optimization."
			shift
			;;
		--js-dir)
			[ $# -gt 0 ] || fail "Missing argument to --js-dir."
			js_dir="$1"
			shift
			;;
		--css-dir)
			[ $# -gt 0 ] || fail "Missing argument to --css-dir."
			css_dir="$1"
			shift
			;;
		--compiler)
			[ $# -gt 0 ] || fail "Missing argument to --compiler."
			compiler=$1
			shift
			;;
		*)
			name="$arg"
			;;
	esac
done

# sanity check
cd "$BASE_DIR" || fail "Failed to change directory to '$BASE_DIR'."
[[ -d "$css_dir" && "$js_dir" ]] || fail "huh? where am I? can't find $css_dir or $js_dir."
java -version &>/dev/null || fail "Missing or broken java JRE."
jscc="java -jar $compiler"
cc_code='var a=3;'
cc_test=$(echo "$cc_code" | $jscc)
[ "$cc_code" == "$cc_test" ] || fail "compiler not found or working properly"

#
# JavaScript
# ----------
cat ${js_files[*]} > "$js_dir/.$name.dev.js.$$" || fail "Failed to concatinate javascript files together."
#TODO: run through jslint first and abort on errors, customizing as needed?
errors=$($jscc --compilation_level $optimization \
	--js "$js_dir/.$name.dev.js.$$" \
	2>&1 > "$js_dir/$name.js.compiling")
[ $? -eq 0 ] || {
	# e.g. "public/js/.enduser_cp.dev.js.2337:8529: ERROR - blah, blah, blah."
	# try to get the file name to show a bit more detail
	echo "$errors" | awk -F: '/: ERROR / {print $2, $1, $3}' | while read line file errmsg; do
		pre_line=$((line-5))
		post_line=$((line+5))
		echo "$errmsg"
		echo "$pre_line v------------------------------------------v"
		sed "$pre_line,$post_line"'!d' "$file" | sed 's/\t/  /'
		echo "$post_line ^------------------------------------------^"
		echo
	done
	fail "Javascript compilation failures, compilation aborted."
}
# set perms if root
[ $WHOAMI == 'root' ] && {
	chown $os_user:$os_group "$js_dir/$name.js.compiling" || fail "Failed to chown '$js_dir/$name.js.compiling' to $os_user:$os_group"
	chmod $os_perms "$js_dir/$name.js.compiling" || fail "Failed to chmod '$js_dir/$name.js.compiling' to $os_perms"
	chown $os_user:$os_group "$js_dir/.$name.dev.js.$$" || fail "Failed to chown '$js_dir/.$name.dev.js.$$' to $os_user:$os_group"
	chmod $os_perms "$js_dir/.$name.dev.js.$$" || fail "Failed to chmod $js_dir/.$name.dev.js.$$ to $os_perms"
}
# update build target
mv -f "$js_dir/$name.js.compiling" "$js_dir/$name.js" || fail "Failed to update '$js_dir/$name.js' with compiled javascript."
 # dev build for debugging production
mv -f "$js_dir/.$name.dev.js.$$" "$js_dir/$name.dev.js" || fail "Failed to update '$js_dir/$name.dev.js' for development build"

#
# CSS
# ---
cat ${css_files[*]} > "$css_dir/.$name.css.$$" || fail "Failed to concatinate CSS files together."
# TODO: get some CSS validator/minifier?
# set perms if root
[ $WHOAMI == 'root' ] && {
	chown $os_user:$os_group "$css_dir/.$name.css.$$" || fail "Failed to chown $css_dir/.$name.css.$$ to $os_user:$os_group"
	chmod $os_perms "$css_dir/.$name.css.$$" || fail "Failed to chmod $css_dir/.$name.css.$$ to $os_perms"
}
# update build target
mv -f "$css_dir/.$name.css.$$" "$css_dir/$name.css" || fail "Failed to update $css_dir/$name.css with compiled CSS."

# check for 4096+ styles and QQ-- I believe IE shits itself when this happens
# TODO: find a better way to check this... but it *should* be safe enough of a check for now :)
[[ $(grep -c '}' $css_dir/$name.css) -ge 4096 ]] && fail "BUILD SUCCESSFUL; BUT CSS HAS GONE OVER 4096 LINES. INTERNET EXPLODER MIGHT SHIT ITSELF."

exit 0
